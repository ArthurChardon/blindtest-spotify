{"version":3,"sources":["logo.svg","loading.svg","Button.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Button","props","onClick","children","getRandomNumber","x","Math","floor","random","App","useState","text","tracks","setTracks","songsLoaded","setSongsLoaded","currentTrack","setCurrentTrack","AlbumCover","src","track","album","images","url","style","width","height","checkAnswer","id","swal","useEffect","fetch","method","headers","Authorization","then","response","json","data","console","log","items","length","previewUrl","preview_url","track0","track1","track2","className","logo","alt","playStatus","Sound","status","PLAYING","name","loading","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,8PCO5BC,MAJCC,GACd,4BAAQC,QAASD,EAAMC,SAAUD,EAAME,UCuBzC,SAASC,EAAgBC,GACvB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,GAwFrBI,MAnFH,KAAO,MAAD,EACQC,mBAAS,IADjB,mBACTC,EADS,aAEYD,mBAAS,KAFrB,mBAETE,EAFS,KAEDC,EAFC,OAGsBH,oBAAS,GAH/B,mBAGTI,EAHS,KAGIC,EAHJ,OAIwBL,mBAAS,MAJjC,mBAITM,EAJS,KAIKC,EAJL,KAMVC,EAAcjB,IAClB,MAAMkB,EAAMlB,EAAMmB,MAAMA,MAAMC,MAAMC,OAAO,GAAGC,IAC9C,OACE,yBAAKJ,IAAKA,EAAKK,MAAO,CAAEC,MAAO,IAAKC,OAAQ,QAiB9C,SAASC,EAAYC,GAEhBA,GAAMZ,EAAaI,MAAMQ,GAE1BC,KAAK,QAAS,eAAgB,WAI9BA,KAAK,MAAO,cAAY,SAK5B,GA1BFC,oBAAW,KAAOC,MAAM,uCAAwC,CAC9DC,OAAQ,MACRC,QAAS,CACPC,cAAe,oKAEhBC,KAAKC,GAAUA,EAASC,QACxBF,KAAMG,IACLC,QAAQC,IAAI,wDAA6CF,GACzDzB,EAAUyB,EAAKG,OACfxB,EAAgBqB,EAAKG,MAAMrC,EAAgBkC,EAAKG,MAAMC,UACtD3B,GAAe,MACZ,IAeDD,EAeC,CAEH,IAAI6B,EAAa3B,EAAaI,MAAMwB,YAEhCC,EAASjC,EAAOR,EAAgBQ,EAAO8B,SACvCI,EAASlC,EAAOR,EAAgBQ,EAAO8B,SACvCK,EAAS/B,EAEb,OACE,yBAAKgC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAK7B,IAAK8B,IAAMD,UAAU,WAAWE,IAAI,SACzC,wBAAIF,UAAU,aAAd,6CAEF,yBAAKA,UAAU,cACf,wBAAIA,UAAU,aAAd,UAAkCpC,EAAO8B,OAAzC,cACE,kBAACxB,EAAD,CAAYE,MAAOJ,IACnB,kBAAC,IAAD,CAAOO,IAAKoB,EAAYQ,WAAYC,IAAMC,OAAOC,WAEnD,yBAAKN,UAAU,eACb,kBAAC,EAAD,CAAQ9C,QAAS,IAAMyB,EAAYkB,EAAOzB,MAAMQ,KAAMiB,EAAOzB,MAAMmC,MACnE,kBAAC,EAAD,CAAQrD,QAAS,IAAMyB,EAAYmB,EAAO1B,MAAMQ,KAAMkB,EAAO1B,MAAMmC,MACnE,kBAAC,EAAD,CAAQrD,QAAS,IAAMyB,EAAYoB,EAAO3B,MAAMQ,KAAMmB,EAAO3B,MAAMmC,QApCzE,OACE,yBAAKP,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAK7B,IAAKqC,IAASR,UAAU,cAAcE,IAAI,YAC/C,wBAAIF,UAAU,aAAd,4BAEF,yBAAKA,UAAU,cACb,2BAAIrC,IAEN,yBAAKqC,UAAU,kBCxEzB,MAAMS,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT7B,KAAKiC,IACJA,EAAaC,cAAgB,KAC3B,MAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,KACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,WAK1BnC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBmC,MAAMC,IACLrC,QAAQqC,MAAM,4CAA6CA,KChEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,qBAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,OAAQ,KAC9B,MAAMpB,EAAK,UAAMkB,qBAAN,sBAEPzB,EAwCV,SAAiCO,GAE/BjC,MAAMiC,GACH7B,KAAKC,IAGkB,MAApBA,EAASiB,SACuD,IAAhEjB,EAASH,QAAQoD,IAAI,gBAAgBC,QAAQ,cAG7CrB,UAAUC,cAAcqB,MAAMpD,KAAKiC,IACjCA,EAAaoB,aAAarD,KAAK,KAC7BwB,OAAOC,SAAS6B,aAKpB1B,EAAgBC,KAGnBW,MAAM,KACLpC,QAAQC,IACN,mEA5DAkD,CAAwB1B,GAGxBD,EAAgBC,MChCxB2B,K","file":"static/js/main.02239977.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.79f6b6a0.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.9d4cbf40.svg\";","import React from 'react';\nimport './Button.css';\n\nconst Button = (props) => (\n  <button onClick={props.onClick}>{props.children}</button>\n);\n\nexport default Button;\n","/*global swal*/\n\nimport React from 'react';\nimport logo from './logo.svg';\nimport loading from './loading.svg';\nimport './App.css';\nimport Sound from 'react-sound';\nimport Button from './Button';\nimport { useState, useEffect } from 'react';\n\nconst apiToken = 'BQDcvCoFlelGuKGxTLP1jvgKrdXvPjEyEZScMcT5caQsOm4tkGhgyIC8gpt2gmzCuB7vzKLy43reFxPcTcfGmstuGjfHNC8puPfMpYUr2j3cmgULVSF8lhGiQPmDVC3i3dXfYMXKG2R6WNkZ3zY20Zg';\n\nfunction shuffleArray(array) {\n  let counter = array.length;\n\n  while (counter > 0) {\n    let index = getRandomNumber(counter);\n    counter--;\n    let temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n\n  return array;\n}\n\n/* Return a random number between 0 included and x excluded */\nfunction getRandomNumber(x) {\n  return Math.floor(Math.random() * x);\n}\n\n\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const [tracks, setTracks] = useState([]);\n  const [songsLoaded, setSongsLoaded] = useState(false)\n  const [currentTrack, setCurrentTrack] = useState(null);\n\n  const AlbumCover = (props) => {\n    const src = props.track.track.album.images[0].url;\n    return (\n      <img src={src} style={{ width: 400, height: 400}} />\n    )\n  }\n\n  useEffect (() => {fetch('https://api.spotify.com/v1/me/tracks', {\n    method: 'GET',\n    headers: {\n      Authorization: 'Bearer ' + apiToken,\n    },\n  }).then(response=>response.json())\n    .then((data) => {\n      console.log(\"Réponse reçue ! Voilà ce que j'ai reçu : \", data);\n      setTracks(data.items);\n      setCurrentTrack(data.items[getRandomNumber(data.items.length)]);\n      setSongsLoaded(true)\n    })}, []);\n\n    function checkAnswer(id)\n    {\n      if(id == currentTrack.track.id)\n      {\n        swal('Bravo', 'encore bravo', 'success');\n      }\n      else\n      {\n        swal('Nul', 'Très nul', 'error')\n      }\n    }\n\n\n    if(!songsLoaded) {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={loading} className=\"App-loading\" alt=\"loading\"/>\n            <h1 className=\"App-title\">Chargement des musiques</h1>\n          </header>\n          <div className=\"App-images\">\n            <p>{text}</p>\n          </div>\n          <div className=\"App-buttons\">\n          </div>\n        </div>\n      )\n    }\n    else {\n      //currentTrack = tracks[0];\n      let previewUrl = currentTrack.track.preview_url;\n\n      let track0 = tracks[getRandomNumber(tracks.length)];\n      let track1 = tracks[getRandomNumber(tracks.length)];\n      let track2 = currentTrack;\n\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n            <h1 className=\"App-title\">Bienvenue sur le Blindtest de la zone !!</h1>\n          </header>\n          <div className=\"App-images\">\n          <h2 className=\"App-texte\">Il y a {tracks.length} chansons.</h2>\n            <AlbumCover track={currentTrack} />\n            <Sound url={previewUrl} playStatus={Sound.status.PLAYING}/>\n          </div>\n          <div className=\"App-buttons\">\n            <Button onClick={() => checkAnswer(track0.track.id)}>{track0.track.name}</Button>\n            <Button onClick={() => checkAnswer(track1.track.id)}>{track1.track.name}</Button>\n            <Button onClick={() => checkAnswer(track2.track.id)}>{track2.track.name}</Button>\n          </div>\n        </div>\n      );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}